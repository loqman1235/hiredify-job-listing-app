generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  email            String            @unique
  password_hash    String
  role             Role              @default(CANDIDATE)
  avatar           Avatar?
  candidateProfile CandidateProfile?
  employerProfile  EmployerProfile?
  sessions         Session[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("users")
}

model Avatar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  publicId  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @map("_id")
  userId    String   @unique @db.ObjectId
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model CandidateProfile {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  candidateId String        @unique @db.ObjectId
  candidate   User?         @relation(fields: [candidateId], references: [id])
  // categoryId  String        @db.ObjectId
  // category    Category?     @relation(fields: [categoryId], references: [id])
  fullname    String?
  dateOfBirth String?
  gender      Gender?
  phoneNumber String?
  address     String?
  location    String?
  salary      Int?
  salaryType  SalaryType?
  title       String?
  bio         String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  application Application[]

  @@map("candidate_profiles")
}

model EmployerProfile {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  companyImage   CompanyImage?
  employerId     String        @unique @db.ObjectId
  employer       User?         @relation(fields: [employerId], references: [id])
  fullname       String?
  phoneNumber    String?
  website        String?
  companySize    Int?
  about          String?
  location       String?
  address        String?
  jobs           Job[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  companyImageId String?       @db.ObjectId

  @@map("employe_profiles")
}

model CompanyImage {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  employerId String          @unique @db.ObjectId
  employer   EmployerProfile @relation(fields: [employerId], references: [id])
  publicId   String
  url        String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Job {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  employerId   String          @db.ObjectId
  employer     EmployerProfile @relation(fields: [employerId], references: [id])
  categoryId   String          @db.ObjectId
  category     Category        @relation(fields: [categoryId], references: [id])
  title        String
  description  String
  type         JobType
  salaryType   SalaryType
  minSalary    Int
  maxSalary    Int
  location     String
  address      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  applications Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  jobId       String            @db.ObjectId
  job         Job               @relation(fields: [jobId], references: [id])
  candidateId String            @db.ObjectId
  candidate   CandidateProfile  @relation(fields: [candidateId], references: [id])
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("applications")
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]
  // candidates CandidateProfile[]

  @@map("categories")
}

// ENUMS
enum Role {
  CANDIDATE
  EMPLOYER
}

enum Gender {
  MALE
  FEMALE
}

enum SalaryType {
  HOURLY
  DAILY
  MONTHLY
  YEARLY
}

enum JobType {
  FREELANCE
  FULL_TIME
  PART_TIME
  INTERNSHIP
  TEMPORARY
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

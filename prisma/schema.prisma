generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  email            String
  password_hash    String
  avatar           String?
  isEmployer       Boolean           @default(false)
  role             Role              @default(CANDIDATE)
  candidateProfile CandidateProfile?
  employerProfile  EmployerProfile?
  jobs             Job[]
  Session          Session[]

  @@map("users")
}

model CandidateProfile {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  candidate   User?       @relation(fields: [candidateId], references: [id])
  candidateId String      @unique @db.ObjectId
  fullName    String?
  dateOfBirth DateTime?
  gender      Gender?     @default(MALE)
  phoneNumber String?
  email       String?
  address     String?
  location    String?
  salary      Int?
  salaryType  SalaryType?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("candidate_profiles")
}

model EmployerProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employer    User?    @relation(fields: [employerId], references: [id])
  employerId  String   @unique @db.ObjectId
  companyName String?
  address     String?
  location    String?
  description String?
  website     String?
  companySize Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("employer_profiles")
}

model Job {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  employer    User?      @relation(fields: [employerId], references: [id])
  employerId  String     @unique @db.ObjectId
  title       String
  description String
  location    String
  category    String
  type        JobType
  minSalary   Int
  maxSalary   Int
  salaryType  SalaryType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("jobs")
}

model Application {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("applications")
}

model Session {
  id        String   @id @map("_id")
  userId    String   @db.ObjectId
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId])

  @@map("sessions")
}

enum Role {
  CANDIDATE
  EMPLOYER
}

enum Gender {
  MALE
  FEMALE
}

enum SalaryType {
  HOURLY
  DAILY
  MONTHLY
  YEARLY
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
  VOLUNTARY
  FREELANCE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
